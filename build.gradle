import java.text.SimpleDateFormat

def getGithubCredentials() {
    if (project.hasProperty("gpr.user") && project.hasProperty("gpr.key")) {
        return new Tuple(project.findProperty("gpr.user").toString(), project.findProperty("gpr.key").toString())
    } else if (System.getenv("GITHUB_ACTOR") != null && System.getenv("GITHUB_TOKEN") != null) {
        return new Tuple(System.getenv("GITHUB_ACTOR"), System.getenv("GITHUB_TOKEN"))
    } else {
        logger.error("Please specify your github username (gpr.user) and access token (gpr.key) in ~/.gradle/gradle.properties")
        return null
    }
}

buildscript {
    ext.kotlinVersion = '1.4.32'

    repositories {
        /* It is useful to have the central maven repo before the Itemis's one
           as it is more reliable */
        maven { url "https://repo.maven.apache.org/maven2" }
        maven { url 'https://plugins.gradle.org/m2/' }
        mavenCentral()
        maven { url 'https://projects.itemis.de/nexus/content/repositories/mbeddr' }
    }

    dependencies {
        classpath 'de.itemis.mps:mps-gradle-plugin:mps20211.1.5.281.69e6edc'
        classpath 'com.google.googlejavaformat:google-java-format:1.8+'
    }
}

plugins {
    id "com.diffplug.gradle.spotless" version "4.5.1" apply false
    id "org.jetbrains.kotlin.jvm" version "1.6.10" apply false
    id "org.jetbrains.kotlin.multiplatform" version "1.6.10" apply false
    id "org.jetbrains.kotlin.plugin.serialization" version "1.6.10" apply false
    id "maven-publish"
}

ext.githubCredentials = getGithubCredentials()

if (System.getenv("NEXUS_USERNAME") != null) ext.nexusUsername = System.getenv("NEXUS_USERNAME")
if (System.getenv("NEXUS_PASSWORD") != null) ext.nexusPassword = System.getenv("NEXUS_PASSWORD")

def mpsVersionProps = new Properties()
file("mps-version.properties").withInputStream { mpsVersionProps.load(it) }
ext.mpsMajorVersion = mpsVersionProps.getProperty("mpsMajorVersion")
ext.mpsMinorVersion = mpsVersionProps.getProperty("mpsMinorVersion")
ext.mpsVersion = mpsVersionProps.getProperty("mpsVersion")
ext.mpsExtensionsVersion = mpsVersionProps.getProperty("mpsExtensionsVersion")
if (mpsExtensionsVersion == null || mpsExtensionsVersion.length() == 0) {
    ext.mpsExtensionsVersion = "$mpsMajorVersion+"
}

import de.itemis.mps.gradle.GitBasedVersioning
def versionFile = new File("$rootDir/modelix.version")
if (System.getenv("TRAVIS_TAG") != null && !System.getenv("TRAVIS_TAG").isEmpty()) {
    ext.modelixVersion = System.getenv("TRAVIS_TAG")
} else if (project.hasProperty("teamcity")) {
    def buildNumber = System.env.BUILD_NUMBER.toInteger()
    def branch = GitBasedVersioning.gitBranch
    if (branch.matches(/(refs[\/-])?tags[\/-].+/)) {
        if (branch.startsWith("refs/tags/")) branch = branch.substring("refs/tags/".length())
        if (branch.startsWith("refs-tags-")) branch = branch.substring("refs-tags-".length())
        if (branch.startsWith("tags/")) branch = branch.substring("tags/".length())
        if (branch.startsWith("tags-")) branch = branch.substring("tags/".length())
        ext.modelixVersion = branch
    } else {
        def hash = GitBasedVersioning.gitShortCommitHash
        ext.modelixVersion = "${branch}.${buildNumber}.${hash}"
        println "##teamcity[buildNumber '${modelixVersion}']"
    }
} else if (versionFile.exists()) {
    ext.modelixVersion = versionFile.text.trim()
} else {
    ext.modelixVersion = "$mpsVersion-" + new SimpleDateFormat("yyyyMMddHHmm").format(new Date()) + "-SNAPSHOT"
}
versionFile.write(ext.modelixVersion)
println("modelix version: " + ext.modelixVersion)

ext.releaseRepository = 'https://projects.itemis.de/nexus/content/repositories/mbeddr'
ext.snapshotRepository = 'https://projects.itemis.de/nexus/content/repositories/mbeddr_snapshots'
ext.publishingRepository = modelixVersion.endsWith("-SNAPSHOT") ? snapshotRepository : releaseRepository

println("gpr.user = " + project.findProperty("gpr.user"))
println("gpr.key = " + project.findProperty("gpr.key"))
println("GITHUB_ACTOR = " + System.getenv("GITHUB_ACTOR"))
println("GITHUB_TOKEN = " + System.getenv("GITHUB_TOKEN"))
if (!project.hasProperty("gpr.user") && System.getenv("GITHUB_ACTOR") != null) {
    ext.setProperty("gpr.user", System.getenv("GITHUB_ACTOR"))
}
if (!project.hasProperty("gpr.key") && System.getenv("GITHUB_TOKEN") != null) {
    ext.setProperty("gpr.key", System.getenv("GITHUB_TOKEN"))
}

subprojects {
    apply plugin: 'maven-publish'

    group 'org.modelix'
    version modelixVersion

    repositories {
        /* It is useful to have the central maven repo before the Itemis's one
           as it is more reliable */
        mavenLocal()
        maven { url "https://repo.maven.apache.org/maven2" }
        mavenCentral()
        maven { url 'https://projects.itemis.de/nexus/content/repositories/mbeddr' }
    }

    publishing {
        repositories {
            if (githubCredentials != null) {
                maven {
                    name = "GitHubPackages"
                    url = uri("https://maven.pkg.github.com/modelix/modelix")
                    if (githubCredentials != null) {
                        credentials {
                            username = githubCredentials[0]
                            password = githubCredentials[1]
                        }
                    }
                }
            }
            if (project.hasProperty("artifacts.itemis.cloud.user")) {
                maven {
                    name = "itemisCloud"
                    url = modelixVersion.contains("SNAPSHOT")
                            ? uri("https://artifacts.itemis.cloud/repository/maven-mps-snapshots/")
                            : uri("https://artifacts.itemis.cloud/repository/maven-mps-releases/")
                    credentials {
                        username = project.findProperty("artifacts.itemis.cloud.user").toString()
                        password = project.findProperty("artifacts.itemis.cloud.pw").toString()
                    }
                }
            }
        }
    }
}
description = "Cloud storage and web UI for MPS"

defaultTasks 'assemble'

def mavenSettingsTemplateFile = new File(new File(project.rootDir, "bundled-maven-dependencies"), "settings-template.xml").absoluteFile
def mavenSettingsFile = new File(new File(project.rootDir, "bundled-maven-dependencies"), "settings.xml").absoluteFile
mavenSettingsFile.text = mavenSettingsTemplateFile.text
        .replace("{{username}}", githubCredentials[0])
        .replace("{{password}}", githubCredentials[1])