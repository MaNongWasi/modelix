plugins {
    id "java"
    id "application"
    id "com.diffplug.gradle.spotless"
    id 'maven-publish'
    id 'com.adarshr.test-logger' version '2.1.0'
    id "org.jetbrains.kotlin.jvm"
    id 'com.github.johnrengelman.shadow' version '6.1.0'
}

description = 'Model Server offering access to model storage'

defaultTasks 'build'

compileJava {
    sourceCompatibility = '11'
    targetCompatibility = '11'
}

dependencies {
    implementation group: 'org.modelix', name: 'model-api', version: "$mpsExtensionsVersion"
    implementation project(':model-client')
    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: kotlinVersion
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.10'

    implementation group: 'org.json', name: 'json', version:'20180813'
    implementation group: 'org.java-websocket', name: 'Java-WebSocket', version:'1.4.0'
    implementation group: 'org.apache.commons', name: 'commons-collections4', version:'4.4'
    implementation group: 'io.lettuce', name: 'lettuce-core', version:'5.1.8.RELEASE'
    implementation group: 'ch.qos.logback', name: 'logback-classic', version:'1.2.7'

    def igniteVersion = '2.10.0'
    implementation group: 'org.apache.ignite', name: 'ignite-core', version: igniteVersion
    implementation group: 'org.apache.ignite', name: 'ignite-spring', version: igniteVersion
    implementation group: 'org.apache.ignite', name: 'ignite-indexing', version: igniteVersion

    implementation group: 'org.postgresql', name: 'postgresql', version:'42.2.14'

    implementation group: 'org.eclipse.jetty', name: 'jetty-server', version: '9.4.21.v20190926'
    implementation group: 'org.eclipse.jetty.websocket', name: 'websocket-servlet', version: '9.4.21.v20190926'
    implementation group: 'org.eclipse.jetty', name: 'jetty-servlet', version: '9.4.21.v20190926'
    implementation group: 'org.eclipse.jetty.websocket', name: 'websocket-server', version: '9.4.21.v20190926'
    implementation group: 'org.eclipse.jetty', name: 'jetty-servlets', version: '9.4.21.v20190926'

    implementation group: 'commons-io', name: 'commons-io', version: '2.6'
    implementation group: 'com.google.guava', name: 'guava', version: '28.1-jre'
    implementation group: 'com.beust', name: 'jcommander', version: '1.7'
    implementation group: 'org.apache.cxf', name: 'cxf-rt-rs-sse', version: '3.3.7'
    implementation group: 'org.apache.cxf', name: 'cxf-rt-rs-client', version: '3.3.7'

    testImplementation group: 'junit', name: 'junit', version: '4.12'
    testImplementation group: 'io.cucumber', name: 'cucumber-java', version: '6.2.2'
}

configurations {
    cucumberRuntime {
        extendsFrom testImplementation
    }
}

jar {
    manifest {
        attributes 'Main-Class': 'org.modelix.model.server.Main'
    }
}

task fatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'org.modelix.model.server.Main'
    }
    archiveBaseName = 'model-server-fatJar'
    archiveVersion = 'latest'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

shadowJar {
    archiveBaseName.set('model-server-fatJar')
    archiveClassifier.set('fatJar')
    archiveVersion.set('latest')
}

def fatJarFile = file("$buildDir/libs/model-server-fatJar-latest.jar")
def fatJarArtifact = artifacts.add('archives', fatJarFile) {
    type 'jar'
    builtBy 'shadowJar'
}

task cucumber() {
    dependsOn shadowJar, compileTestJava
    doLast {
        javaexec {
            main = "io.cucumber.core.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = ['--plugin', 'pretty', '--glue', 'org.modelix.model.server.functionaltests', 'src/test/resources/functionaltests']
        }
    }
}

task copyLibs(type: Copy) {
    into "$buildDir/libs"
    from configurations.default
}

assemble.finalizedBy(copyLibs)

application {
    mainClassName = "org.modelix.model.server.Main"
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/modelix/modelix")
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
/*        maven {
            url rootProject.publishingRepository
            if (rootProject.hasProperty('nexusUsername')) {
                credentials {
                    username rootProject.nexusUsername
                    password rootProject.nexusPassword
                }
            }
        }*/
    }
    publications {
        modelServer(MavenPublication) {
            groupId project.group
            version project.version

            from components.java
        }
        modelServerFatJar(MavenPublication) {
            groupId project.group
            artifactId 'model-server-fatjar'
            version project.version

            artifact fatJarArtifact
        }
    }
}

spotless {
    java {
        googleJavaFormat("1.8").aosp()
        licenseHeader '/*\n' +
                ' * Licensed under the Apache License, Version 2.0 (the "License");\n' +
                ' * you may not use this file except in compliance with the License.\n' +
                ' * You may obtain a copy of the License at\n' +
                ' *\n' +
                ' *  http://www.apache.org/licenses/LICENSE-2.0\n' +
                ' *\n' +
                ' * Unless required by applicable law or agreed to in writing,\n' +
                ' * software distributed under the License is distributed on an\n' +
                ' * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n' +
                ' * KIND, either express or implied.  See the License for the\n' +
                ' * specific language governing permissions and limitations\n' +
                ' * under the License. \n' +
                ' */\n' +
                '\n'
    }
}
