{
  "openapi": "3.0.2",
  "info": {
    "title": "Modelix Model Server",
    "version": "0.0.37"
  },
  "paths": {
    "/": {
      "get": {
        "tags": [
          "meta"
        ],
        "description": "Verify if the server is up and running",
        "parameters": [],
        "responses": {
          "200": {
            "description": "It returns the string 'Model Server'",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Model Server"
                }
              }
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "tags": [
          "meta"
        ],
        "description": "Verify if the server is working correctly",
        "parameters": [],
        "responses": {
          "200": {
            "description": "It returns either the string 'healthy' or the string 'not healthy'",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "healthy"
                }
              }
            }
          }
        }
      }
    },
    "/headers": {
      "get": {
        "tags": [
          "meta"
        ],
        "description": "Print back the headers of the request",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The list of headers (name and value), one per line",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Accept: */*\nX-Request-ID: dbe2938410b8e80c0444ddf552492546\nX-Forwarded-Host: dsl-modelix.siginet.lu\nX-Forwarded-Proto: https\nX-Original-URI: /headers\nUser-Agent: PostmanRuntime/7.26.8\nHost: dsl-modelix.siginet.lu\nAccept-Encoding: gzip, deflate, br\nX-Forwarded-Port: 443\nAuthorization: Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6Ijk2QUM4ODMxOUQ4Rjk4RkNENTU4RkZCNEQ2NEVBNEIwMjQ2NjUxQzUiLCJ0eXAiOiJhdCtqd3QiLCJ4NXQiOiJscXlJTVoyUG1QelZXUC0wMWs2a3NDUm1VY1UifQ.eyJuYmYiOjE2MjQ0MzY3NDUsImV4cCI6MTYyNDQ2NTU0NSwiaXNzIjoiaHR0cHM6Ly9hY2NvdW50cy1jaS5zaWdpbmV0Lmx1IiwiYXVkIjoiaGVyYSIsImNsaWVudF9pZCI6Imdlc2NvbXBsdXMuZHNsLm1wc19jbGllbnRfcGtjZSIsInN1YiI6IjEwMTY1NSIsImF1dGhfdGltZSI6MTYyNDQzMDQ2MCwiaWRwIjoibG9jYWwiLCJuYW1lIjoiZmVkZXJpY28udG9tYXNzZXR0aSIsInNldHVwIjoidHJ1ZSIsInNjb3BlIjpbIm9wZW5pZCIsImhlcmEuZHNsLnB1Ymxpc2giXSwiYW1yIjpbInB3ZCJdfQ.gI6laH2X7ztV5bAR2C-DbOpS98bZ-h7rczQ7ZK_CFUWedHYMVowz-cuTQwevTmfD3Ypd4ztfMoEQQExrdpm4Mmz-HnR-uCj0adFILvpJ8_RmSsr3BEcTuWUPZFmDZv2i_SP7exIpMbQSrl19eoZH5kObx1NKra3YXtbD_mmqqHTGmHByk3OCE4lm1Wy8wTDBq9pk7quiJKuvPbtwFl3AyGv6ctVWDqWvnycNDsoOMDafFVcxH9DjsCDiFn9vlZV-6CVkfxUs1Hsvu6ro_JoeYHnjns2jOOwNR58SrHtEgSUiL0bqJ5ZCSlqijkIMnPimlm_XIRH3h18zQJrYXJJbPg\nX-Forwarded-For: 10.33.52.250\nPostman-Token: 74a163b4-b454-499c-9003-f2f35cc8fc91\nContent-Length: 14\nX-Real-IP: 10.33.52.250\nX-Scheme: https\nContent-Type: application/json\n"
                }
              }
            }
          }
        }
      }
    },
    "/get/{key}": {
      "get": {
        "tags": [
          "key/value store"
        ],
        "description": "Read the value associated to key",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "example": "my-key",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The value associated with the key",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "My amazing key value"
                }
              }
            }
          },
          "403": {
            "description": "If the user is not authorized or the key is protected (keys prefixed with '$$$' are considered protected)",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Not authorized."
                }
              }
            }
          },
          "404": {
            "description": "If the key is not found"
          }
        }
      }
    },
    "/generateToken": {
      "get": {
        "tags": [
          "authorization"
        ],
        "description": "Generate an authentication token for the user. It first check for the header X-Forwarded-Email. In case the value is not present or empty and the address is trusted the email value default to localhost",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The token is created and store, with an expiration of 7 days",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "49fc40bb2d884c078c2d535504daa1ec"
                }
              }
            }
          },
          "403": {
            "description": "If no email value is present and the address is not trusted the token cannot be generated",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Not logged in."
                }
              }
            }
          }
        }
      }
    },
    "/getEmail": {
      "get": {
        "tags": [
          "authorization"
        ],
        "description": "Retrieve the email associated to a given token",
        "parameters": [],
        "responses": {
          "200": {
            "description": "It returns the email associated with the token, if a token has been provided. Otherwise it returns the value '<no email>'",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "foo@bar.com"
                }
              }
            }
          },
          "403": {
            "description": "If there is not proper authorization. Proper authorization is presented either when the request comes from a trusted address or when the Authorization header contains a proper value",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Not authorized."
                }
              }
            }
          }
        }
      }
    },
    "/counter/{key}": {
      "post": {
        "tags": [
          "key/value store"
        ],
        "description": "Increase a counter associated with the key. When the model client connects to the model server it uses this to  receive a unique client ID. This client ID is used for the first 32 bits of all generated node IDs.",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "example": "my-key",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The value associated with the key",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "1"
                }
              }
            }
          },
          "403": {
            "description": "If there is not proper authorization. Proper authorization is presented either when the request comes from a trusted address or when the Authorization header contains a proper value. Also requests for protected keys cause this answer",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Not authorized."
                }
              }
            }
          }
        }
      }
    },
    "/getRecursively/{key}": {
      "get": {
        "tags": [
          "key/value store"
        ],
        "description": "Read the value associated with the key. The value is then examined for hashes, which are then explored, recursively",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "example": "my-key",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The values associated with the key and its descendants. Note that if a key has no associated value the corresponding JSON element will not have the value entry",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "type": "string"
                      },
                      "value": {
                        "type": "string",
                      },
                    },
                    "required": ["key"]
                  },
                  "example": "[\n    {\n        \"value\": \"12\",\n        \"key\": \"abc\"\n    }\n]"
                }
              }
            }
          },
          "403": {
            "description": "If the user is not authorized or the key is protected (keys prefixed with '$$$' are considered protected)",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Not authorized."
                }
              }
            }
          },
          "404": {
            "description": "If the key is not found"
          }
        }
      }
    },
    "/put/{key}": {
      "put": {
        "tags": [
          "key/value store"
        ],
        "description": "Set the value associated to key",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "example": "my-key",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Value to associate to the key",
          "required": true,
          "content": {
            "text/plain": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A simple confirmation message",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "OK"
                }
              }
            }
          },
          "403": {
            "description": "If the user is not authorized or the key is protected (keys prefixed with '$$$' are considered protected)",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Not authorized."
                }
              }
            }
          },
          "404": {
            "description": "If traversing the key we encounter an unknown key",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/putAll": {
      "put": {
        "tags": [
          "key/value store"
        ],
        "description": "Set a list of given keys and values",
        "parameters": [

        ],
        "requestBody": {
          "description": "List of keys and values",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string",
                    }
                  },
                  "required": ["key"]
                },
                "example": "[\n    {\n        \"value\": \"12\",\n        \"key\": \"abc\"\n    }\n]"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A simple confirmation message",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "2 entries written"
                }
              }
            }
          },
          "403": {
            "description": "If the user is not authorized or the key is protected (keys prefixed with '$$$' are considered protected)",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "If traversing the key we encounter an unknown key",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/subscribe/{key}": {
      "get": {
        "tags": [
          "key/value store"
        ],
        "description": "Subscribe to get notified of changes to a given key",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "example": "my-key",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Changes for subscribed key",
            "content": {
              "x-events": {
                "example": "the-new-key-value"
              }
            }
          }
        }
      }
    }
  }
}
