apply plugin: 'java'

group = 'org.modelix'
version = '1.0-SNAPSHOT'

description = "modelix UI server"

sourceCompatibility = 1.11
targetCompatibility = 1.11



def jdk_home

if (ext.has('java11_home')) {
    jdk_home = ext.get('java11_home')
} else if (System.getenv('JB_JAVA11_HOME') != null) {
    jdk_home = System.getenv('JB_JAVA11_HOME')
} else {
    if (!JavaVersion.current().isJava11Compatible()) {
        throw new GradleException("This build script requires Java >=11 but you are currently using ${JavaVersion.current()}.\nWhat you can do:\n"
            + "  * Use project property java11_home to point to the Java 11 JDK.\n"
            + "  * Use environment variable JAVA11_HOME to point to the Java 11 JDK\n"
            + "  * Run Gradle using Java 11")
    }
    jdk_home = System.getProperty('java.home')
}

// Check JDK location
if (!new File(jdk_home, "lib").exists()) {
    throw new GradleException("Unable to locate JDK home folder. Detected folder is: $jdk_home")
}

// https://docs.gradle.org/current/userguide/building_java_projects.html#example_configure_java_7_build
def javaExecutablesPath = new File(jdk_home, 'bin')
def javaExecutables = [:].withDefault { execName ->
    def executable = new File(javaExecutablesPath, execName)
    assert executable.exists(): "There is no ${execName} executable in ${javaExecutablesPath}"
    executable
}
tasks.withType(AbstractCompile) {
    options.with {
        fork = true
        forkOptions.javaHome = file(jdk_home)
    }
}
tasks.withType(Javadoc) {
    executable = javaExecutables.javadoc
}
tasks.withType(Test) {
    executable = javaExecutables.java
}
tasks.withType(JavaExec) {
    executable = javaExecutables.java
}




repositories {
        
     maven { url "https://repo.maven.apache.org/maven2" }
}

dependencies {
     compile fileTree(dir: '../artifacts/mps/lib', include: '*.jar')
}
